---
- name: Ensure MySQL databases are present.
  mysql_db:
    name: "{{ item.name }}"
    collation: "{{ item.collation }}"
    encoding: "{{ item.encoding }}"
    state: present
  with_items: "{{ mysql_databases }}"

- name: Create mysql users
  mysql_user:
    name: "{{ item.name }}"
    host: "{{ item.host }}"
    password: "{{ item.password }}"
    priv: "{{ item.priv }}"
  with_items: "{{ mysql_users }}"
  tags: mysql-prep

- name: Ensure replication user exists on master.
  mysql_user:
    name: "{{ item.name }}"
    host: "{{ item.host }}"
    password: "{{ item.password }}"
    priv: "{{ item.priv }}"
    state: present
  when: >
    (mysql_replication_role == 'master')
  with_items: 
    - "{{ mysql_replication_user }}"
  notify: restart mysqld daemon
  tags: make replication

- name: Check slave replication status.
  mysql_replication:
    mode: getslave
#    login_user: "{{ mysql_replication_user.name }}"
#    login_password: "{{ mysql_replication_user.password }}"
  ignore_errors: true
  register: slave
  when: mysql_replication_role == 'slave'
  notify: restart mysqld daemon
  tags: make replication

- name: Check master replication status.
  mysql_replication: 
    mode=getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when: mysql_replication_role == 'slave'
  notify: restart mysqld daemon
  tags: make replication

- name: Configure replication on the slave.
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ item.name }}"
    master_password: "{{ item.password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  with_items: "{{ mysql_replication_user }}"
  ignore_errors: True
  when: >
    (mysql_replication_role == 'slave')
  notify: restart mysqld daemon
  tags: make replication

- name: Start replication.
  mysql_replication: mode=startslave
  when: >
    (mysql_replication_role == 'slave')
  tags: make replication
